&parser.Program{
	Statements: []*struct { Directive *parser.Directive "\"@\" @@"; FnDecl *parser.FnDecl "| @@" }{
		{
			Directive: &parser.Directive{
				Class: &"Package",
				Instr: &struct { Ident *string "( @Ident"; String *string "| @String"; Number *float64 "| @Float)" }{
					String: &"\"Dev\"",
				},
			},
		},
		{
			Directive: &parser.Directive{
				Class: &"Entry",
				Instr: &struct { Ident *string "( @Ident"; String *string "| @String"; Number *float64 "| @Float)" }{
					Ident: &"Start",
				},
			},
		},
		{
			FnDecl: &parser.FnDecl{
				Ident: &"Start",
				Type: &parser.Expression{
					Type: &parser.Type{
						Primative: &parser.TypeName{
							Type: &"Void",
						},
					},
					Op: &"->",
					Binary: &parser.Expression{
						Type: &parser.Type{
							Vector: &parser.TypeName{
								Type: &"Int",
							},
						},
					},
				},
				Expressions: []*parser.Expression{
					{
						Application: &parser.Application{
							Function: &"Return",
							Parameter: &parser.Expression{
								Primary: &parser.Primary{
									Vec: []*parser.Expression{
										{
											Primary: &parser.Primary{
												Int: &1,
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
	},
}